#include "ctype.h"
#include "stdint.h"

typedef struct {
    char character;
    const uint8_t data[5];
} CharData;

const CharData fontDataMap[] = {
    {'A', {0b01110, 0b10001, 0b11111, 0b10001, 0b10001}}, // 'A'
    {'B', {0b11110, 0b10001, 0b11110, 0b10001, 0b11110}}, // 'B'
    {'C', {0b001110, 0b010001, 0b010000, 0b010001, 0b001110}}, // 'C'
    {'D', {0b11110, 0b10001, 0b10001, 0b10001, 0b11110}}, // 'D'
    {'E', {0b11111, 0b10000, 0b11100, 0b10000, 0b11111}}, // 'E'
    {'F', {0b11111, 0b10000, 0b11100, 0b10000, 0b10000}}, // 'F'
    {'G', {0b01110, 0b10001, 0b10011, 0b10001, 0b01111}}, // 'G'
    {'H', {0b10001, 0b10001, 0b11111, 0b10001, 0b10001}}, // 'H'
    {'I', {0b11111, 0b00100, 0b00100, 0b00100, 0b11111}}, // 'I'
    {'J', {0b11111, 0b00010, 0b00010, 0b10010, 0b01100}}, // 'J'
    {'K', {0b10001, 0b10010, 0b11100, 0b10010, 0b10001}}, // 'K'
    {'L', {0b10000, 0b10000, 0b10000, 0b10000, 0b11111}}, // 'L'
    {'M', {0b10001, 0b11011, 0b10101, 0b10001, 0b10001}}, // 'M'
    {'N', {0b10001, 0b11001, 0b10101, 0b10011, 0b10001}}, // 'N'
    {'O', {0b01110, 0b10001, 0b10001, 0b10001, 0b01110}}, // 'O'
    {'P', {0b11110, 0b10001, 0b11110, 0b10000, 0b10000}}, // 'P'
    {'Q', {0b01110, 0b10001, 0b10101, 0b10011, 0b01111}}, // 'Q'
    {'R', {0b11110, 0b10001, 0b11110, 0b10010, 0b10001}}, // 'R'
    {'S', {0b001110, 0b010000, 0b001110, 0b000001, 0b011110}}, // 'S'
    {'T', {0b11111, 0b00100, 0b00100, 0b00100, 0b00100}}, // 'T'
    {'U', {0b10001, 0b10001, 0b10001, 0b10001, 0b01110}}, // 'U'
    {'V', {0b10001, 0b10001, 0b01010, 0b00100, 0b00100}}, // 'V'
    {'W', {0b10001, 0b10101, 0b10101, 0b10101, 0b01010}}, // 'W'
    {'X', {0b10001, 0b01010, 0b00100, 0b01010, 0b10001}}, // 'X'
    {'Y', {0b10001, 0b01010, 0b00100, 0b00100, 0b00100}}, // 'Y'
    {'Z', {0b11111, 0b00010, 0b00100, 0b01000, 0b11111}}, // 'Z'
    {'0', {0b01110, 0b10001, 0b10101, 0b11001, 0b01110}}, // '0'
    {'1', {0b00100, 0b01100, 0b00100, 0b00100, 0b01110}}, // '1'
    {'2', {0b01110, 0b10001, 0b00010, 0b00100, 0b11111}}, // '2'
    {'3', {0b11110, 0b00001, 0b01110, 0b00001, 0b11110}}, // '3'
    {'4', {0b00010, 0b00110, 0b01010, 0b11111, 0b00010}}, // '4'
    {'5', {0b11111, 0b10000, 0b11110, 0b00001, 0b11110}}, // '5'
    {'6', {0b01110, 0b10000, 0b11110, 0b10001, 0b01110}}, // '6'
    {'7', {0b11111, 0b00001, 0b00010, 0b00100, 0b01000}}, // '7'
    {'8', {0b01110, 0b10001, 0b01110, 0b10001, 0b01110}}, // '8'
    {'9', {0b01110, 0b10001, 0b01111, 0b00001, 0b01110}}, // '9'
    {'.', {0b00000, 0b00000, 0b00000, 0b00000, 0b01000}} // '.'
};

const uint8_t* getCharData(char c) {
    if (isalpha(c)) {
        c = toupper(c);
    }

    for (size_t i = 0; i < sizeof(fontDataMap) / sizeof(fontDataMap[0]); ++i) {
        if (fontDataMap[i].character == c) {
            return fontDataMap[i].data;
        }
    }

    return NULL;
}


const uint8_t fontData[26 + 10 + 1][5] = {
    {0b01110, 0b10001, 0b11111, 0b10001, 0b10001}, // 'f' // A
    {0b11110, 0b10001, 0b11110, 0b10001, 0b11110}, // 'B' // B
    {0b001110, 0b010001, 0b010000, 0b010001, 0b001110}, // 'C' // C
    {0b11110, 0b10001, 0b10001, 0b10001, 0b11110}, // 'D' // D
    {0b11111, 0b10000, 0b11100, 0b10000, 0b11111}, // 'E' // E
    {0b11111, 0b10000, 0b11100, 0b10000, 0b10000}, // 'F' // F
    {0b01110, 0b10001, 0b10011, 0b10001, 0b01111}, // 'G' // G
    {0b10001, 0b10001, 0b11111, 0b10001, 0b10001}, // 'H' // H
    {0b11111, 0b00100, 0b00100, 0b00100, 0b11111}, // 'I' // I
    {0b11111, 0b00010, 0b00010, 0b10010, 0b01100}, // 'j' // J
    {0b10001, 0b10010, 0b11100, 0b10010, 0b10001}, // 'K' // K
    {0b10000, 0b10000, 0b10000, 0b10000, 0b11111}, // 'L' // L
    {0b10001, 0b11011, 0b10101, 0b10001, 0b10001}, // 'M' // M
    {0b10001, 0b11001, 0b10101, 0b10011, 0b10001}, // 'n' // N
    {0b01110, 0b10001, 0b10001, 0b10001, 0b01110}, // 'o' // O
    {0b11110, 0b10001, 0b11110, 0b10000, 0b10000}, // 'p' // P
    {0b01110, 0b10001, 0b10101, 0b10011, 0b01111}, // 'q' // Q
    {0b11110, 0b10001, 0b11110, 0b10010, 0b10001}, // 'R' // R
    {0b001110, 0b010000, 0b001110, 0b000001, 0b011110}, // 'S' // S
    {0b11111, 0b00100, 0b00100, 0b00100, 0b00100}, // 'T' // T
    {0b10001, 0b10001, 0b10001, 0b10001, 0b01110}, // 'U' // U
    {0b10001, 0b10001, 0b01010, 0b00100, 0b00100}, // 'V' // V
    {0b10001, 0b10101, 0b10101, 0b10101, 0b01010}, // 'W' // W
    {0b10001, 0b01010, 0b00100, 0b01010, 0b10001}, // 'X' // X
    {0b10001, 0b01010, 0b00100, 0b00100, 0b00100}, // 'Y' // Y
    {0b11111, 0b00010, 0b00100, 0b01000, 0b11111}, // 'Z' // Z
    {0b01110, 0b10001, 0b10101, 0b11001, 0b01110}, // '0' // 0
    {0b00100, 0b01100, 0b00100, 0b00100, 0b01110}, // '1' // 1
    {0b01110, 0b10001, 0b00010, 0b00100, 0b11111}, // '2' // 2
    {0b11110, 0b00001, 0b01110, 0b00001, 0b11110}, // '3' // 3
    {0b00010, 0b00110, 0b01010, 0b11111, 0b00010}, // '4' // 4
    {0b11111, 0b10000, 0b11110, 0b00001, 0b11110}, // '5' // 5
    {0b01110, 0b10000, 0b11110, 0b10001, 0b01110}, // '6' // 6
    {0b11111, 0b00001, 0b00010, 0b00100, 0b01000}, // '7' // 7
    {0b01110, 0b10001, 0b01110, 0b10001, 0b01110}, // '8' // 8
    {0b01110, 0b10001, 0b01111, 0b00001, 0b01110}, // '9' // 9
    {0b00000, 0b00000, 0b00000, 0b00000, 0b01000} // '.' // .
    
};